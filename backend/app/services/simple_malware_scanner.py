"""
Simple malware scanner fallback for when advanced scanning is not available.
"""

import hashlib
import logging
from typing import Dict, Any, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class ThreatLevel(Enum):
    CLEAN = "clean"
    SUSPICIOUS = "suspicious"
    MALICIOUS = "malicious"

async def scan_file_for_malware(
    file_content: bytes, 
    filename: str,
    **kwargs
) -> Dict[str, Any]:
    """
    Simple file scanning that checks basic file properties.
    Returns a safe result for when advanced malware scanning is not available.
    """
    # Basic file validation
    file_hash = hashlib.sha256(file_content).hexdigest()
    file_size = len(file_content)
    
    # Basic checks
    threat_level = ThreatLevel.CLEAN
    threats_found = []
    
    # Check for extremely large files (potential zip bombs)
    if file_size > 100 * 1024 * 1024:  # 100MB
        threat_level = ThreatLevel.SUSPICIOUS
        threats_found.append("Large file size detected")
    
    # Check for suspicious file extensions in filename
    suspicious_extensions = ['.exe', '.bat', '.cmd', '.scr', '.pif', '.com']
    if any(filename.lower().endswith(ext) for ext in suspicious_extensions):
        threat_level = ThreatLevel.SUSPICIOUS
        threats_found.append("Suspicious file extension")
    
    return {
        "threat_level": threat_level,
        "threats_found": threats_found,
        "scan_duration": 0.001,  # Very fast scan
        "scanner_version": "simple_fallback_1.0",
        "file_hash": file_hash,
        "file_size": file_size,
        "scan_timestamp": None
    }