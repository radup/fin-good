openapi: 3.1.0
info:
  title: FinGood API
  description: |
    AI-Powered Financial Intelligence Platform API
    
    ## Overview
    FinGood provides intelligent transaction categorization and financial analytics for small businesses.
    
    ## Features
    - CSV upload and parsing
    - Rule-based and ML-powered categorization
    - Transaction management and analytics
    - User authentication and authorization
    
    ## Authentication
    This API uses JWT Bearer token authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
    
    ## Rate Limiting
    - 100 requests per minute per user
    - 1000 requests per hour per user
    
    ## Error Handling
    All errors return a consistent format:
    ```json
    {
      "detail": "Error message",
      "error_code": "ERROR_CODE",
      "timestamp": "2024-01-15T10:30:00Z"
    }
    ```
  version: 1.0.0
  contact:
    name: FinGood Support
    email: support@fingood.com
    url: https://fingood.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: https://fingood.com/logo.png
    altText: FinGood Logo

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.fingood.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running and healthy
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  message:
                    type: string
                    example: "FinGood API is running"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  version:
                    type: string
                    example: "1.0.0"

  /api/v1/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              basic:
                summary: Basic registration
                value:
                  email: "user@example.com"
                  password: "securepassword123"
                  full_name: "John Doe"
                  company_name: "Acme Corp"
                  business_type: "Consulting"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                email_exists:
                  summary: Email already registered
                  value:
                    detail: "Email already registered"
                    error_code: "EMAIL_EXISTS"
                    timestamp: "2024-01-15T10:30:00Z"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/auth/login:
    post:
      summary: Login user
      description: Authenticate user and return access token
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  description: User's password
            examples:
              login:
                summary: User login
                value:
                  username: "user@example.com"
                  password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    detail: "Incorrect email or password"
                    error_code: "INVALID_CREDENTIALS"
                    timestamp: "2024-01-15T10:30:00Z"

  /api/v1/auth/me:
    get:
      summary: Get current user
      description: Retrieve current user's profile information
      operationId: getCurrentUser
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/transactions:
    get:
      summary: List transactions
      description: Retrieve a paginated list of user's transactions with optional filtering
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: skip
          in: query
          description: Number of records to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Maximum number of records to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: category
          in: query
          description: Filter by category name
          required: false
          schema:
            type: string
        - name: start_date
          in: query
          description: Filter transactions from this date (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: Filter transactions until this date (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: is_income
          in: query
          description: Filter by transaction type
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
              examples:
                transactions:
                  summary: Sample transactions
                  value:
                    - id: 1
                      date: "2024-01-15T00:00:00Z"
                      amount: -125.50
                      description: "Office Supplies Purchase"
                      vendor: "Staples"
                      category: "Office Supplies"
                      subcategory: "Supplies"
                      is_income: false
                      is_categorized: true
                      confidence_score: 0.95
                      created_at: "2024-01-15T10:30:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/transactions/{transaction_id}:
    get:
      summary: Get transaction
      description: Retrieve a specific transaction by ID
      operationId: getTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: integer
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update transaction
      description: Update transaction categorization
      operationId: updateTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete transaction
      description: Delete a transaction
      operationId: deleteTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: integer
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction deleted successfully"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/transactions/categorize:
    post:
      summary: Categorize transactions
      description: Re-run categorization on all uncategorized transactions
      operationId: categorizeTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categorization completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Categorized 15 transactions"
                  categorized_count:
                    type: integer
                    example: 15

  /api/v1/upload/csv:
    post:
      summary: Upload CSV file
      description: Upload and process a CSV file with transaction data
      operationId: uploadCSV
      tags:
        - File Upload
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file to upload
            examples:
              csv_upload:
                summary: Upload transaction CSV
                value:
                  file: "sample-data.csv"
      responses:
        '200':
          description: File uploaded and processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File uploaded successfully"
                  batch_id:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  processed_count:
                    type: integer
                    example: 16
                  categorized_count:
                    type: integer
                    example: 12
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        row:
                          type: integer
                        error:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_file:
                  summary: Invalid file type
                  value:
                    detail: "Only CSV files are supported"
                    error_code: "INVALID_FILE_TYPE"
                    timestamp: "2024-01-15T10:30:00Z"
                file_too_large:
                  summary: File too large
                  value:
                    detail: "File too large"
                    error_code: "FILE_TOO_LARGE"
                    timestamp: "2024-01-15T10:30:00Z"

  /api/v1/upload/status/{batch_id}:
    get:
      summary: Get upload status
      description: Get the status of an uploaded batch
      operationId: getUploadStatus
      tags:
        - File Upload
      security:
        - BearerAuth: []
      parameters:
        - name: batch_id
          in: path
          required: true
          description: Batch ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Upload status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch_id:
                    type: string
                    format: uuid
                  total_count:
                    type: integer
                  categorized_count:
                    type: integer
                  processed_count:
                    type: integer
                  status:
                    type: string
                    enum: [processing, completed, failed]
        '404':
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/categories:
    get:
      summary: List categories
      description: Retrieve user's categories
      operationId: listCategories
      tags:
        - Categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'

    post:
      summary: Create category
      description: Create a new category
      operationId: createCategory
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /api/v1/categories/rules:
    get:
      summary: List categorization rules
      description: Retrieve user's categorization rules
      operationId: listCategorizationRules
      tags:
        - Categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleResponse'

    post:
      summary: Create categorization rule
      description: Create a new categorization rule
      operationId: createCategorizationRule
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleCreate'
      responses:
        '201':
          description: Rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleResponse'

  /api/v1/analytics/summary:
    get:
      summary: Get transaction summary
      description: Get summary statistics for transactions
      operationId: getTransactionSummary
      tags:
        - Analytics
      security:
        - BearerAuth: []
      parameters:
        - name: start_date
          in: query
          description: Start date for analysis (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: End date for analysis (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSummary'

  /api/v1/analytics/monthly:
    get:
      summary: Get monthly analytics
      description: Get monthly transaction summary for a specific year
      operationId: getMonthlyAnalytics
      tags:
        - Analytics
      security:
        - BearerAuth: []
      parameters:
        - name: year
          in: query
          required: true
          description: Year to analyze
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
      responses:
        '200':
          description: Monthly analytics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    month:
                      type: integer
                      minimum: 1
                      maximum: 12
                    year:
                      type: integer
                    income:
                      type: number
                    expenses:
                      type: number
                    net:
                      type: number
                    transaction_count:
                      type: integer

  /api/v1/analytics/top-categories:
    get:
      summary: Get top categories
      description: Get top spending categories
      operationId: getTopCategories
      tags:
        - Analytics
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of categories to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: start_date
          in: query
          description: Start date for analysis (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: End date for analysis (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Top categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category:
                      type: string
                    total_amount:
                      type: number
                    transaction_count:
                      type: integer

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          description: User's password
          example: "securepassword123"
        full_name:
          type: string
          description: User's full name
          example: "John Doe"
        company_name:
          type: string
          description: Company name
          example: "Acme Corp"
        business_type:
          type: string
          description: Type of business
          example: "Consulting"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        full_name:
          type: string
          example: "John Doe"
        company_name:
          type: string
          example: "Acme Corp"
        business_type:
          type: string
          example: "Consulting"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "bearer"

    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2024-01-15T00:00:00Z"
        amount:
          type: number
          format: float
          example: -125.50
        description:
          type: string
          example: "Office Supplies Purchase"
        vendor:
          type: string
          example: "Staples"
        category:
          type: string
          example: "Office Supplies"
        subcategory:
          type: string
          example: "Supplies"
        is_income:
          type: boolean
          example: false
        source:
          type: string
          example: "csv"
        is_processed:
          type: boolean
          example: true
        is_categorized:
          type: boolean
          example: true
        confidence_score:
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.95
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    TransactionUpdate:
      type: object
      properties:
        category:
          type: string
          description: Transaction category
          example: "Office Supplies"
        subcategory:
          type: string
          description: Transaction subcategory
          example: "Supplies"
        create_rule:
          type: boolean
          description: Whether to create a categorization rule from this update
          default: false

    TransactionSummary:
      type: object
      properties:
        total_transactions:
          type: integer
          example: 150
        total_income:
          type: number
          format: float
          example: 25000.00
        total_expenses:
          type: number
          format: float
          example: 15000.00
        categorized_count:
          type: integer
          example: 140
        uncategorized_count:
          type: integer
          example: 10
        categories:
          type: object
          additionalProperties:
            type: number
          description: Category breakdown with amounts
          example:
            "Office Supplies": 1250.50
            "Travel": 3200.00
            "Software": 1500.00

    CategoryCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Category name
          example: "Office Supplies"
        parent_category:
          type: string
          description: Parent category name
          example: "Business Expenses"
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Hex color code
          example: "#3b82f6"

    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Office Supplies"
        parent_category:
          type: string
          example: "Business Expenses"
        color:
          type: string
          example: "#3b82f6"
        is_default:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    RuleCreate:
      type: object
      required:
        - pattern
        - pattern_type
        - category
      properties:
        pattern:
          type: string
          description: Pattern to match (keyword, regex, or vendor name)
          example: "Staples"
        pattern_type:
          type: string
          enum: [keyword, regex, vendor]
          description: Type of pattern matching
          example: "vendor"
        category:
          type: string
          description: Category to assign when pattern matches
          example: "Office Supplies"
        subcategory:
          type: string
          description: Subcategory to assign when pattern matches
          example: "Supplies"
        priority:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          description: Rule priority (higher numbers applied first)
          example: 1

    RuleResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        pattern:
          type: string
          example: "Staples"
        pattern_type:
          type: string
          enum: [keyword, regex, vendor]
          example: "vendor"
        category:
          type: string
          example: "Office Supplies"
        subcategory:
          type: string
          example: "Supplies"
        priority:
          type: integer
          example: 1
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Human-readable error message
          example: "Transaction not found"
        error_code:
          type: string
          description: Machine-readable error code
          example: "TRANSACTION_NOT_FOUND"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-01-15T10:30:00Z"

    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: integer
                description: Location of the error
              msg:
                type: string
                description: Error message
              type:
                type: string
                description: Error type
          example:
            - loc: ["body", "email"]
              msg: "field required"
              type: "value_error.missing"

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Transactions
    description: Transaction management and categorization
  - name: File Upload
    description: CSV file upload and processing
  - name: Categories
    description: Category and rule management
  - name: Analytics
    description: Financial analytics and reporting
  - name: System
    description: System health and status endpoints

externalDocs:
  description: FinGood API Documentation
  url: https://docs.fingood.com/api
